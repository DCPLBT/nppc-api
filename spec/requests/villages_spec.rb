# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/villages', type: :request do
  let(:user) { create(:admin) }
  let(:region) { create(:region, user: user) }
  let(:district) { create(:district, region: region, user: user) }
  let(:extension) { create(:extension, district: district, user: user) }
  before(:each) do
    sign_in(user)
  end

  let(:valid_attributes) do
    { name: Faker::Name.name, user: user, extension: extension }
  end

  let(:invalid_attributes) do
    { name: nil }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Village.create! valid_attributes
      get api_v1_extension_villages_url(extension), as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      village = Village.create! valid_attributes
      get api_v1_village_url(village), as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Village' do
        expect do
          post api_v1_extension_villages_url(extension),
               params: { village: valid_attributes }, as: :json
        end.to change(Village, :count).by(1)
      end

      it 'renders a JSON response with the new village' do
        post api_v1_extension_villages_url(extension),
             params: { village: valid_attributes }, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Village' do
        expect do
          post api_v1_extension_villages_url(extension),
               params: { village: invalid_attributes }, as: :json
        end.to change(Village, :count).by(0)
      end

      it 'renders a JSON response with errors for the new village' do
        post api_v1_extension_villages_url(extension),
             params: { village: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { name: 'Name updated' }
      end

      it 'updates the requested village' do
        village = Village.create! valid_attributes
        patch api_v1_village_url(village),
              params: { village: new_attributes }, as: :json
        village.reload
        expect(response).to have_http_status(:ok)
        expect(json.dig(:data, :attributes, :name)).to eq(new_attributes[:name])
      end

      it 'renders a JSON response with the village' do
        village = Village.create! valid_attributes
        patch api_v1_village_url(village),
              params: { village: new_attributes }, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the village' do
        village = Village.create! valid_attributes
        patch api_v1_village_url(village),
              params: { village: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested village' do
      village = Village.create! valid_attributes
      expect do
        delete api_v1_village_url(village), as: :json
      end.to change(Village, :count).by(-1)
    end
  end
end
