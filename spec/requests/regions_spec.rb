# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/regions', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Region. As you add validations to Region, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:admin) }
  before(:each) do
    sign_in(user)
  end
  let(:valid_attributes) do
    {
      name: Faker::Name.name,
      description: Faker::Restaurant.review,
      user_id: user.id
    }
  end

  let(:invalid_attributes) do
    { name: nil, description: '', user_id: user.id }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Region.create! valid_attributes
      get api_v1_regions_url, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      region = Region.create! valid_attributes
      get api_v1_region_url(region), as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Region' do
        expect do
          post api_v1_regions_url,
               params: { region: valid_attributes }, as: :json
        end.to change(Region, :count).by(1)
      end

      it 'renders a JSON response with the new region' do
        post api_v1_regions_url,
             params: { region: valid_attributes }, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Region' do
        expect do
          post api_v1_regions_url,
               params: { region: invalid_attributes }, as: :json
        end.to change(Region, :count).by(0)
      end

      it 'renders a JSON response with errors for the new region' do
        post api_v1_regions_url,
             params: { region: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { name: 'Mongar', description: 'Mongar region' }
      end

      it 'updates the requested region' do
        region = Region.create! valid_attributes
        patch api_v1_region_url(region),
              params: { region: new_attributes }, as: :json
        region.reload
        expect(status).to eq(200)
        expect(json.dig(:data, :attributes, :name)).to eq(new_attributes[:name])
      end

      it 'renders a JSON response with the region' do
        region = Region.create! valid_attributes
        patch api_v1_region_url(region),
              params: { region: new_attributes }, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the region' do
        region = Region.create! valid_attributes
        patch api_v1_region_url(region),
              params: { region: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested region' do
      region = Region.create! valid_attributes
      expect do
        delete api_v1_region_url(region), as: :json
      end.to change(Region, :count).by(-1)
    end
  end
end
